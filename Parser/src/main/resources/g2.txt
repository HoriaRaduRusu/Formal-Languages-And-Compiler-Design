P SL S D SS STS T ST CT CTENDPART AS IOS TERM FACT RSTMT WSTMT WSTMTENDPART IFSTMT FORSTMT WHILESTMT COND RELOP
GO STOP ; have be boolean char integer string = + - * / % ( ) [ ] read write assuming then stopAssuming otherwise > < >= <= == <> while do stopWhile for stopFor id const
P
P -> GO SL STOP
SL -> S
SL -> SL S
S -> D
S -> SS
S -> STS
D -> have id be T ;
T -> ST
T -> CT
ST -> boolean
ST -> char
ST -> integer
ST -> string
CT -> T [ CTENDPART
CTENDPART -> const ]
CTENDPART -> id ]
SS -> AS
SS -> IOS
AS -> id = id ;
IOS -> RSTMT
IOS -> WSTMT
RSTMT -> read ( id ) ;
WSTMT -> write ( WSTMTENDPART
WSTMTENDPART -> id ) ;
WSTMTENDPART -> const ) ;
SS -> IFSTMT
SS -> WHILESTMT
SS -> FORSTMT
IFSTMT -> assuming ( COND ) then SL stopAssuming ;
IFSTMT -> assuming ( COND ) then SL otherwise SL stopAssuming ;
COND -> id RELOP id
RELOP -> >
RELOP -> <
RELOP -> >=
RELOP -> <=
RELOP -> ==
RELOP -> <>
WHILESTMT -> while ( COND ) do SL stopWhile ;
FORSTMT -> for ( AS COND ; AS ) do SL stopFor ;